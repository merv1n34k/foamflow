#!/usr/bin/env bash
set -uo pipefail

ROOT="$(pwd)"
CONFIG="${ROOT}/Flowfile"
TEMPLATE="${ROOT}/case.template"

die(){ echo "Error: $*" >&2; exit 1; }
info(){ echo "[flow] $*"; }

usage(){
  cat <<USAGE
Usage:
  $(basename "$0") [new|pre|run|post] CASE_NAME
  $(basename "$0") CASE_NAME          # runs new -> pre -> run -> post
USAGE
  exit 1
}

[ -f "$CONFIG" ]  || die "Flowfile not found."
[ -f "$TEMPLATE" ]|| die "case.template not found."

if [ $# -eq 1 ]; then
    SUBCMD="all"
    CASENAME="${1%/}"
elif [ $# -eq 2 ]; then
    SUBCMD="$1"
    CASENAME="${2%/}"
else
    usage
fi

ensure_case_suffix() {
  local name="${1%/}"
  [[ "$name" == *.case ]] && echo "$name" || echo "${name}.case"
}
CASE_DIR="$(ensure_case_suffix "$CASENAME")"

# ============================
# OPTIMIZED PARSING FUNCTIONS
# ============================

# Use associative array for O(1) lookups (requires bash 4+)
declare -A FLOW_CONFIG

# Optimized Flowfile reader - single pass with awk
read_flowfile(){
  FLOW_CONFIG=()
  local IFS=$'\n'
  while IFS='=' read -r key val; do
    [ -n "$key" ] && FLOW_CONFIG["$key"]="$val"
  done < <(awk -F'=' '
    /^[[:space:]]*#/ { next }
    /^[[:space:]]*$/ { next }
    {
      gsub(/^[[:space:]]+|[[:space:]]+$|#.*$/, "", $0)
      if (NF >= 2) {
        key = $1; val = $2
        for (i=3; i<=NF; i++) val = val "=" $i
        gsub(/^[[:space:]]+|[[:space:]]+$/, "", key)
        gsub(/^[[:space:]]+|[[:space:]]+$/, "", val)
        if (key) print key "=" val
      }
    }
  ' "$CONFIG")
}

# Efficient sed script builder using printf
build_sed_script(){
  local sedfile="$1"
  : > "$sedfile"  # Create empty file first

  # Check if FLOW_CONFIG has any entries
  if [ ${#FLOW_CONFIG[@]} -eq 0 ]; then
    return 0
  fi

  {
    for key in "${!FLOW_CONFIG[@]}"; do
      # Use bash parameter expansion for escaping (more portable)
      local val="${FLOW_CONFIG[$key]}"
      val="${val//\\/\\\\}"  # Escape backslashes
      val="${val//&/\\&}"     # Escape ampersands
      val="${val//\//\\/}"    # Escape forward slashes
      printf 's/%%%%%s%%%%/%s/g\n' "$key" "$val"
    done
  } >> "$sedfile"
}

# Streamlined placeholder finder
find_placeholders(){
  grep -Rho --exclude-dir='constant/polyMesh' \
    --exclude='*.foam' --exclude='*.OpenFOAM' \
    --exclude='*.stl' --exclude='*.STL' \
    --exclude='*.gz' --exclude='*.tar' --exclude='*.zip' \
    --exclude='*.png' --exclude='*.jpg' \
    '%%[A-Za-z0-9_]\+%%' "$1" 2>/dev/null \
    | sed 's/%%\([^%]*\)%%/\1/' | sort -u
}

# Optimized validation with associative array lookup
require_all_placeholders_defined(){
  local dir="$1"
  local -a missing=()  # Initialize as empty array
  local token

  while IFS= read -r token; do
    [ -z "$token" ] && continue
    [ -z "${FLOW_CONFIG[$token]:-}" ] && missing+=("$token")
  done < <(find_placeholders "$dir")

  if [ ${#missing[@]} -gt 0 ]; then
    {
      echo "Unresolved template variables:"
      printf '  - %%%%s%%%%\n' "${missing[@]}"
    } >&2
    die "Add values for the above keys to Flowfile."
  fi
}

# Optimized substitution with better error handling
apply_substitutions() {
  local dir="$1" sedfile="$2"
  local errors=0  # Initialize without -i flag for compatibility

  while IFS= read -r -d '' file; do
    # Skip empty files (like pv.foam marker files)
    [ ! -s "$file" ] && continue

    # Skip binary files and specific OpenFOAM files that shouldn't be modified
    case "$(basename "$file")" in
      *.foam|*.OpenFOAM|*.stl|*.STL|*.gz|*.tar|*.zip|*.png|*.jpg) continue ;;
    esac

    if LC_ALL=C sed -f "$sedfile" "$file" > "${file}.flowtmp" 2>/dev/null; then
      mv -f "${file}.flowtmp" "$file"
    else
      rm -f "${file}.flowtmp"
      ((errors++))
      echo "Warning: Failed to process $file" >&2
    fi
  done < <(find "$dir" -type f ! -path '*/constant/polyMesh/*' -print0)

  [ $errors -gt 0 ] && die "Failed to apply substitutions to $errors file(s)"
}

# ============================
# STAGE FUNCTIONS (UNCHANGED)
# ============================

stage_new(){
  [ -e "$CASE_DIR" ] && die "Case '$CASE_DIR' already exists."
  info "Creating case '$CASE_DIR'..."
  . "$TEMPLATE"
  type create_case >/dev/null 2>&1 || die "create_case not defined in case.template"
  create_case "$CASE_DIR"
  info "Case created."
}

stage_pre(){
  [ -d "$CASE_DIR" ] || die "Case '$CASE_DIR' not found. Run 'flow new $CASENAME' first."
  info "Pre-processing '$CASE_DIR'..."

  FLOW_CONFIG=()  # Reset the associative array
  read_flowfile
  require_all_placeholders_defined "$CASE_DIR"
  local sedfile="$CASE_DIR/.flow_subst.sed"
  build_sed_script "$sedfile"
  apply_substitutions "$CASE_DIR" "$sedfile"
  rm -f "$sedfile"

  # make Allrun and Allmesh executables
  chmod +x "$CASE_DIR/Allrun"
  chmod +x "$CASE_DIR/Allmesh"

  # Mesh build (OpenSCAD->STL + blockMesh + optional snappy)
  if [ -x "$CASE_DIR/Allmesh" ]; then
    ( cd "$CASE_DIR" && ./Allmesh )
  else
    echo "$CASE_DIR/Allmesh"
    die "Allmesh not found in case. Check case.template."
  fi
  info "Pre-processing complete."
}

stage_run(){
  [ -d "$CASE_DIR" ] || die "Case '$CASE_DIR' not found."
  info "Running solver in '$CASE_DIR'..."
  if [ -x "$CASE_DIR/Allrun" ]; then
    ( cd "$CASE_DIR" && ./Allrun )
  else
    ( cd "$CASE_DIR" && multiphaseEulerFoam )
  fi
  info "Run complete."
}

stage_post(){
  [ -d "$CASE_DIR" ] || die "Case '$CASE_DIR' not found."
  info "Post-processing '$CASE_DIR'..."
  local result="${CASE_DIR%/.case}_result.csv"
  : > "$result"
  echo "Metric,Value" >> "$result"
  local last="$(find "$CASE_DIR" -maxdepth 1 -type d -regex '.*/[0-9]+(\.[0-9]+)?' | sort -V | tail -1)"
  [ -z "$last" ] && last="$CASE_DIR/0"
  for ph in gas liquid solid; do
    local f="$last/alpha.$ph"
    if [ -f "$f" ]; then
      if grep -qE 'internalField[[:space:]]+uniform' "$f"; then
        local val
        val="$(awk '/internalField/{print $3}' "$f" | tr -d ';')"
        echo "alpha.$ph (avg approx),$val" >> "$result"
      else
        echo "alpha.$ph (avg approx),N/A" >> "$result"
      fi
    fi
  done
  echo "Output,$result" >> "$result"
  info "Post-processing complete. Wrote $result"
}

case "${SUBCMD}" in
  new)  stage_new ;;
  pre)  stage_pre ;;
  run)  stage_run ;;
  post) stage_post ;;
  all)  stage_new; stage_pre; stage_run; stage_post ;;
  *)    usage ;;
esac
