#!/usr/bin/env bash
set -uo pipefail

ROOT="$(pwd)"
CONFIG="${ROOT}/Flowfile"
TEMPLATE="${ROOT}/case.template"

die(){ echo "Error: $*" >&2; exit 1; }
info(){ echo "[flow] $*"; }

[ -f "$CONFIG" ] || die "Flowfile not found."
[ -f "$TEMPLATE" ] || die "case.template not found."

OVERRIDES=()
ARGS=()

while [ $# -gt 0 ]; do
  case "$1" in
    -D) [ $# -lt 2 ] && die "-D requires argument"
        OVERRIDES+=("$2"); shift 2 ;;
    -D*) OVERRIDES+=("${1#-D}"); shift ;;
    *) ARGS+=("$1"); shift ;;
  esac
done

set -- "${ARGS[@]:-}"

if [ $# -eq 1 ]; then
    SUBCMD="all"; CASENAME="${1%/}"
elif [ $# -eq 2 ]; then
    SUBCMD="$1"; CASENAME="${2%/}"
else
    echo "Usage: $(basename "$0") [-D KEY=VALUE ...] [new|pre|run|post] CASE_NAME"; exit 1
fi

CASE_DIR="$([[ "$CASENAME" == *.case ]] && echo "$CASENAME" || echo "${CASENAME}.case")"
declare -A FLOW_CONFIG

read_flowfile(){
  FLOW_CONFIG=()
  while IFS= read -r line; do
    [[ "$line" =~ ^[[:space:]]*# ]] && continue
    [[ "$line" =~ ^[[:space:]]*$ ]] && continue
    line="${line%%#*}"
    [[ "$line" != *=* ]] && continue
    key="${line%%=*}"; val="${line#*=}"
    key="${key// /}"; val="${val#"${val%%[![:space:]]*}"}"; val="${val%"${val##*[![:space:]]}"}"
    [ -n "$key" ] && FLOW_CONFIG["$key"]="$val"
  done < "$CONFIG"

  for override in "${OVERRIDES[@]}"; do
    [[ "$override" != *=* ]] && continue
    key="${override%%=*}"; val="${override#*=}"
    key="${key// /}"
    [ -n "${FLOW_CONFIG[$key]:-}" ] && FLOW_CONFIG["$key"]="$val"
  done
}

# Read only specific keys for case creation
read_config_key(){
  local key="$1" default="${2:-}"
  while IFS= read -r line; do
    [[ "$line" =~ ^[[:space:]]*# ]] && continue
    line="${line%%#*}"
    [[ "$line" != *=* ]] && continue
    k="${line%%=*}"; v="${line#*=}"
    k="${k// /}"
    [ "$k" = "$key" ] && { echo "${v// /}"; return 0; }
  done < "$CONFIG"

  for override in "${OVERRIDES[@]}"; do
    [[ "$override" != *=* ]] && continue
    k="${override%%=*}"; k="${k// /}"
    [ "$k" = "$key" ] && { echo "${override#*=}"; return 0; }
  done

  echo "$default"
}

apply_substitutions(){
  local dir="$1" processed=0
  while IFS= read -r -d '' file; do
    [ ! -s "$file" ] && continue
    case "$(basename "$file")" in *.foam|*.stl|*.gz|*.tar|*.zip|*.png|*.jpg) continue ;; esac
    grep -q '@[A-Za-z0-9_]*@' "$file" 2>/dev/null || continue
    local content="" original=""
    content=$(cat "$file" 2>/dev/null) || continue
    original="$content"
    for key in "${!FLOW_CONFIG[@]}"; do
      content="${content//@${key}@/${FLOW_CONFIG[$key]}}"
    done
    [ "$content" != "$original" ] && echo "$content" > "$file" && ((processed++))
  done < <(find "$dir" -type f ! -path '*/constant/polyMesh/*' -print0)
  info "Modified $processed files"
}

find_placeholders(){
  grep -Rho --exclude-dir='constant/polyMesh' --exclude='*.foam' --exclude='*.stl' \
    '@[A-Za-z0-9_]*@' "$1" 2>/dev/null | sed 's/@\([^@]*\)@/\1/' | sort -u
}

require_all_placeholders_defined(){
  local dir="$1" missing=()
  while IFS= read -r token; do
    [ -z "$token" ] && continue
    token="${token// /}"
    [ -z "${FLOW_CONFIG[$token]:-}" ] && missing+=("$token")
  done < <(find_placeholders "$dir")
  if [ ${#missing[@]} -gt 0 ]; then
    echo "Unresolved template variables:" >&2
    printf '  - @%s@\n' "${missing[@]}" >&2
    die "Add values for the above keys to Flowfile."
  fi
}

stage_new(){
  [ -e "$CASE_DIR" ] && die "Case '$CASE_DIR' already exists."
  info "Creating case '$CASE_DIR'..."

  # Read config flags for conditional creation
  USE_SOLID=$(read_config_key "USESOLID" "1")
  export USE_SOLID

  . "$TEMPLATE"
  type create_case >/dev/null 2>&1 || die "create_case not defined in case.template"
  create_case "$CASE_DIR"
  info "Case created."
  unset USE_SOLID # remove environment variable
}

stage_pre(){
  [ -d "$CASE_DIR" ] || die "Case '$CASE_DIR' not found. Run 'flow new $CASENAME' first."
  info "Pre-processing '$CASE_DIR'..."
  FLOW_CONFIG=()
  read_flowfile
  [ ${#OVERRIDES[@]} -gt 0 ] && info "Applied ${#OVERRIDES[@]} overrides"
  require_all_placeholders_defined "$CASE_DIR"
  apply_substitutions "$CASE_DIR"
  chmod +x "$CASE_DIR"/{Allrun,Allmesh} 2>/dev/null || true
  if [ -x "$CASE_DIR/Allmesh" ]; then
    ( cd "$CASE_DIR" && ./Allmesh )
  else
    die "Allmesh not found in case."
  fi
  info "Pre-processing complete."
}

stage_run(){
  [ -d "$CASE_DIR" ] || die "Case '$CASE_DIR' not found."
  info "Running solver in '$CASE_DIR'..."
  if [ -x "$CASE_DIR/Allrun" ]; then
    ( cd "$CASE_DIR" && ./Allrun )
  else
    ( cd "$CASE_DIR" && multiphaseEulerFoam )
  fi
  info "Run complete."
}

stage_post(){
  [ -d "$CASE_DIR" ] || die "Case '$CASE_DIR' not found."
  info "Post-processing '$CASE_DIR'..."
  local result="${CASE_DIR%/.case}_result.csv"
  : > "$result"
  echo "Metric,Value" >> "$result"
  local last="$(find "$CASE_DIR" -maxdepth 1 -type d -regex '.*/[0-9]+(\.[0-9]+)?' | sort -V | tail -1)"
  [ -z "$last" ] && last="$CASE_DIR/0"
  for ph in gas liquid solid; do
    local f="$last/alpha.$ph"
    if [ -f "$f" ] && grep -qE 'internalField[[:space:]]+uniform' "$f"; then
      echo "alpha.$ph (avg approx),$(grep 'internalField' "$f" | sed 's/.*uniform[[:space:]]*//; s/;.*//')" >> "$result"
    else
      echo "alpha.$ph (avg approx),N/A" >> "$result"
    fi
  done
  echo "Output,$result" >> "$result"
  info "Post-processing complete. Wrote $result"
}

case "${SUBCMD}" in
  new)  stage_new ;;
  pre)  stage_pre ;;
  run)  stage_run ;;
  post) stage_post ;;
  all)  stage_new; stage_pre; stage_run; stage_post ;;
  *)    echo "Unknown command: $SUBCMD"; exit 1 ;;
esac
