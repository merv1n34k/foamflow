
#!/usr/bin/env bash
# case.template - create a complete OpenFOAM case (gas-liquid-solid, Euler-Euler)
# Defines: create_case <caseDir>
# Leaves values as @PLACEHOLDER@ to be substituted by `flow pre` from Flowfile

create_case() {
  local caseDir="$1"

  # OpenFOAM dictionary header (v2506) to prepend to relevant files
  read -r -d '' HEADER <<'HED'
/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2506                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
HED

  # Directory structure
  mkdir -p "$caseDir/0" "$caseDir/constant" "$caseDir/system"

  # system/controlDict
  cat > "$caseDir/system/controlDict" <<EOF
$HEADER

FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}

application     @SOLVER@;

startFrom       startTime;
startTime       @START_TIME@;
stopAt          endTime;
endTime         @END_TIME@;
deltaT          @DELTA_T@;

writeControl    runTime;
writeInterval   @WRITE_INTERVAL@;
purgeWrite      0;
writeFormat     ascii;
writePrecision  7;
writeCompression off;

timePrecision   6;
runTimeModifiable yes;
adjustTimeStep  no;
maxCo           0.5;
maxAlphaCo      0.5;

// ************************************************************************* //
EOF

  # system/fvSchemes
  cat > "$caseDir/system/fvSchemes" <<EOF
$HEADER

FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}

ddtSchemes
{
    default         Euler;
}

gradSchemes
{
    default         Gauss linear;
}

divSchemes
{
    default         none;

    "div\(phi,alpha.*\)"    Gauss vanLeer;
    "div\(phir,alpha.*,alpha.*\)"   Gauss vanLeer;

    "div\(alphaPhi.*,U.*\)" Gauss limitedLinearV 1;
    div(Rc)                 Gauss linear;
    "div\(phi.*,U.*\)"      Gauss limitedLinearV 1;

    div(phi,k)              Gauss upwind;
    div(phi,omega)          Gauss upwind;

    div(((muEff)*dev2(T(grad(U.liquid))))) Gauss linear;
}

laplacianSchemes
{
    default         Gauss linear orthogonal;
}

interpolationSchemes
{
    default         linear;
}

snGradSchemes
{
    default         orthogonal;
}

fluxRequired
{
    default         yes;
    p;
    p_rgh;
}

wallDist
{
method meshWave;
}

// ************************************************************************* //
EOF

  # system/fvSolution
  cat > "$caseDir/system/fvSolution" <<'EOF'
/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2506                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/

FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSolution;
}

solvers
{
    "alpha.*"
    {
        nAlphaCorr      2;
        nAlphaSubCycles 1;
        cAlpha          1;

        solver          smoothSolver;
        smoother        symGaussSeidel;
        tolerance       1e-08;
        relTol          0;
    }

    p_rgh
    {
        solver          PCG;
        preconditioner  DIC;
        tolerance       1e-06;
        relTol          0.01;
    }

    p_rghFinal
    {
        $p_rgh;
        relTol          0;
    }

    "pcorr.*"
    {
        solver          PCG;
        preconditioner  DIC;
        tolerance       1e-5;
        relTol          0;
    }

    "U.*"
    {
        solver          smoothSolver;
        smoother        symGaussSeidel;
        tolerance       1e-06;
        relTol          0;
    }

    k
    {
        solver          smoothSolver;
        smoother        symGaussSeidel;
        tolerance       1e-06;
        relTol          0;
    }

    kFinal
    {
        $k
        relTol          0;
    }

    omega
    {
        solver          smoothSolver;
        smoother        symGaussSeidel;
        tolerance       1e-06;
        relTol          0;
    }

    omegaFinal
    {
        $omega
        relTol          0;
    }
}

PIMPLE
{
    nOuterCorrectors            1;
    nCorrectors                 2;
    nNonOrthogonalCorrectors    0;

    residualControl
    {
        U.gas     { tolerance 1e-5; relTol 0;    }
        U.liquid  { tolerance 1e-5; relTol 0;    }
        U.solid   { tolerance 1e-5; relTol 0;    }

        p_rgh     { tolerance 1e-5; relTol 0.01; }

        "alpha.*" { tolerance 1e-8; relTol 0;    }

        k         { tolerance 1e-5; relTol 0;    }
        omega     { tolerance 1e-5; relTol 0;    }
    }
}

relaxationFactors
{
    fields
    {
        p_rgh   0.3;
    }
    equations
    {
        ".*"    1.0;
    }
}

// ************************************************************************* //
EOF

  # system/blockMeshDict
  cat > "$caseDir/system/blockMeshDict" <<EOF
$HEADER

FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      blockMeshDict;
}

scale 1.0;

vertices
(
    (0          0           0)
    (@LENGTH@ 0           0)
    (@LENGTH@ @WIDTH@   0)
    (0          @WIDTH@   0)
    (0          0           @HEIGHT@)
    (@LENGTH@ 0           @HEIGHT@)
    (@LENGTH@ @WIDTH@   @HEIGHT@)
    (0          @WIDTH@   @HEIGHT@)
);

blocks
(
    hex (0 1 2 3 4 5 6 7) (@NX@ @NY@ @NZ@) simpleGrading (1 1 1)
);

edges
(
);

patches
(
    patch inlet
    (
        (0 3 2 1)          // bottom face
    )
    patch outlet
    (
        (4 5 6 7)          // top face
    )
    wall walls
    (
        (0 4 7 3)  // left face
        (1 2 6 5)  // right face
        (0 1 5 4)  // front face
        (3 7 6 2)  // back face
    )
);

mergePatchPairs
(
);

// ************************************************************************* //
EOF

  # constant/g
  cat > "$caseDir/constant/g" <<EOF
$HEADER

FoamFile
{
    version     2.0;
    format      ascii;
    class       uniformDimensionedVectorField;
    location    "constant";
    object      g;
}

dimensions      [0 1 -2 0 0 0 0];
value           ( @G_X@ @G_Y@ @G_Z@ );

// ************************************************************************* //
EOF

  # constant/thermophysicalProperties
  cat > "$caseDir/constant/thermophysicalProperties" <<EOF
$HEADER

FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "constant";
    object      thermophysicalProperties;
}

phases
(
    gas
    {
        thermoType
        {
            type            heRhoThermo;
            mixture         pureMixture;
            transport       const;
            thermo          hConst;
            equationOfState perfectGas;
            specie          specie;
            energy          sensibleInternalEnergy;
        }

        mixture
        {
            specie
            {
                molWeight   28.9;
            }
            thermodynamics
            {
                Cp          1005;
                Hf          0;
            }
            transport
            {
                mu          @GAS_MU@;
                Pr          0.7;
            }
        }
    }

    liquid
    {
        thermoType
        {
            type            heRhoThermo;
            mixture         pureMixture;
            transport       const;
            thermo          eConst;
            equationOfState perfectFluid;
            specie          specie;
            energy          sensibleInternalEnergy;
        }

        mixture
        {
            specie
            {
                molWeight   18;
            }
            equationOfState
            {
                R           3000;
                rho0        @LIQUID_RHO@;
            }
            thermodynamics
            {
                Cv          4182;
                Hf          0;
            }
            transport
            {
                mu          @LIQUID_MU@;
                Pr          2.289;
            }
        }
    }

    solid
    {
        thermoType
        {
            type            heRhoThermo;
            mixture         pureMixture;
            transport       const;
            thermo          eConst;
            equationOfState perfectFluid;
            specie          specie;
            energy          sensibleInternalEnergy;
        }

        mixture
        {
            specie
            {
                molWeight   50;
            }
            equationOfState
            {
                R           3000;
                rho0        @SOLID_RHO@;
            }
            thermodynamics
            {
                Cv          1000;
                Hf          0;
            }
            transport
            {
                mu          @SOLID_MU@;
                Pr          1.0;
            }
        }
    }
);

// ************************************************************************* //
EOF

  # constant/turbulenceProperties
  cat > "$caseDir/constant/turbulenceProperties" <<EOF
$HEADER

FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "constant";
    object      turbulenceProperties;
}

{
    simulationType   RAS;

    RAS
    {
        RASModel        kOmegaSST;
        turbulence      on;
        printCoeffs     on;
    }
}

// ************************************************************************* //
EOF

  ############################
  # 0/ initial fields (alphas, U.* , p, p_rgh, k, omega)
  ############################

  # alpha.gas
  cat > "$caseDir/0/alpha.gas" <<EOF
$HEADER

FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    location    "0";
    object      alpha.gas;
}

dimensions      [0 0 0 0 0 0 0];
internalField   uniform @INITIAL_ALPHA_GAS@;

boundaryField
{
    inlet
    {
        type            zeroGradient;
    }
    outlet
    {
        type            zeroGradient;
    }
    walls
    {
        type            zeroGradient;
    }
}

// ************************************************************************* //
EOF

  # alpha.liquid
  cat > "$caseDir/0/alpha.liquid" <<EOF
$HEADER

FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    location    "0";
    object      alpha.liquid;
}

dimensions      [0 0 0 0 0 0 0];
internalField   uniform @INITIAL_ALPHA_LIQUID@;

boundaryField
{
    inlet
    {
        type            zeroGradient;
    }
    outlet
    {
        type            zeroGradient;
    }
    walls
    {
        type            zeroGradient;
    }
}

// ************************************************************************* //
EOF

  # alpha.solid
  cat > "$caseDir/0/alpha.solid" <<EOF
$HEADER

FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    location    "0";
    object      alpha.solid;
}

dimensions      [0 0 0 0 0 0 0];
internalField   uniform @INITIAL_ALPHA_SOLID@;

boundaryField
{
    inlet
    {
        type            zeroGradient;
    }
    outlet
    {
        type            zeroGradient;
    }
    walls
    {
        type            zeroGradient;
    }
}

// ************************************************************************* //
EOF

  # U.gas
  cat > "$caseDir/0/U.gas" <<EOF
$HEADER

FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    location    "0";
    object      U.gas;
}

dimensions      [0 1 -1 0 0 0 0];
internalField   uniform (0 0 0);

boundaryField
{
    inlet
    {
        type            fixedValue;
        value           uniform @GAS_INLET_VEL@;
    }
    outlet
    {
        type            zeroGradient;
    }
    walls
    {
        type            fixedValue;
        value           uniform (0 0 0);
    }
}

// ************************************************************************* //
EOF

  # U.liquid
  cat > "$caseDir/0/U.liquid" <<EOF
$HEADER

FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    location    "0";
    object      U.liquid;
}

dimensions      [0 1 -1 0 0 0 0];
internalField   uniform (0 0 0);

boundaryField
{
    inlet
    {
        type            fixedValue;
        value           uniform (0 0 0);
    }
    outlet
    {
        type            zeroGradient;
    }
    walls
    {
        type            fixedValue;
        value           uniform (0 0 0);
    }
}

// ************************************************************************* //
EOF

  # U.solid
  cat > "$caseDir/0/U.solid" <<EOF
$HEADER

FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    location    "0";
    object      U.solid;
}

dimensions      [0 1 -1 0 0 0 0];
internalField   uniform (0 0 0);

boundaryField
{
    inlet
    {
        type            fixedValue;
        value           uniform (0 0 0);
    }
    outlet
    {
        type            zeroGradient;
    }
    walls
    {
        type            fixedValue;
        value           uniform (0 0 0);
    }
}

// ************************************************************************* //
EOF

  # 0/nut (turbulent kinematic viscosity for RAS)
  cat > "$caseDir/0/nut" <<EOF
$HEADER

FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    location    "0";
    object      nut;
}

dimensions      [0 2 -1 0 0 0 0];
internalField   uniform @NUT_INIT@;

boundaryField
{
    inlet
    {
        type            calculated;
        value           uniform @NUT_INIT@;
    }
    outlet
    {
        type            zeroGradient;
    }
    walls
    {
        type            nutkWallFunction;
        value           uniform @NUT_INIT@;
    }
}

// ************************************************************************* //
EOF

  # p
  cat > "$caseDir/0/p" <<EOF
$HEADER

FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    location    "0";
    object      p;
}

dimensions      [1 -1 -2 0 0 0 0];
internalField   uniform 0;

boundaryField
{
    inlet
    {
        type            zeroGradient;
    }
    outlet
    {
        type            fixedValue;
        value           uniform 0;
    }
    walls
    {
        type            zeroGradient;
    }
}

// ************************************************************************* //
EOF

  # p_rgh
  cat > "$caseDir/0/p_rgh" <<EOF
$HEADER

FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    location    "0";
    object      p_rgh;
}

dimensions      [1 -1 -2 0 0 0 0];
internalField   uniform 0;

boundaryField
{
    inlet
    {
        type            fixedFluxPressure;
        value           uniform 0;
    }
    outlet
    {
        type            prghPressure;
        p               uniform 0;
        value           uniform 0;
    }
    walls
    {
        type            fixedFluxPressure;
        value           uniform 0;
    }
}

// ************************************************************************* //
EOF

  # k (turbulent kinetic energy, liquid phase RANS support)
  cat > "$caseDir/0/k" <<EOF
$HEADER

FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    location    "0";
    object      k;
}

dimensions      [0 2 -2 0 0 0 0];
internalField   uniform @K_INIT@;

boundaryField
{
    inlet
    {
        type            fixedValue;
        value           uniform @K_INIT@;
    }
    outlet
    {
        type            zeroGradient;
    }
    walls
    {
        type            kqRWallFunction;
        value           uniform @K_INIT@;
    }
}

// ************************************************************************* //
EOF

  # omega (specific dissipation rate)
  cat > "$caseDir/0/omega" <<EOF
$HEADER

FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    location    "0";
    object      omega;
}

dimensions      [0 0 -1 0 0 0 0];
internalField   uniform @OMEGA_INIT@;

boundaryField
{
    inlet
    {
        type            fixedValue;
        value           uniform @OMEGA_INIT@;
    }
    outlet
    {
        type            zeroGradient;
    }
    walls
    {
        type            omegaWallFunction;
        value           uniform @OMEGA_INIT@;
    }
}

// ************************************************************************* //
EOF

  # Allrun
  cat > "$caseDir/Allrun" <<'EOF'
#!/usr/bin/env bash
# Allrun - generic run driver (requires OpenFOAM environment)

cd "${0%/*}" || exit 1

if [ -z "$WM_PROJECT_DIR" ]; then
  echo "Error: OpenFOAM environment not loaded. Source your OpenFOAM bashrc first."
  exit 1
fi

blockMesh || { echo "blockMesh failed"; exit 1; }

# Uncomment if using setFields or additional preprocessing
# setFields

multiphaseEulerFoam || { echo "Solver failed"; exit 1; }
EOF
  chmod +x "$caseDir/Allrun"

  # --- ensure triSurface folder exists ---
  mkdir -p "$caseDir/constant/triSurface"

  # system/snappyHexMeshDict
  cat > "$caseDir/system/snappyHexMeshDict" <<EOF
$HEADER

FoamFile
{
    version     2.0;
    format      ascii;
    arch        "LSB;label=32;scalar=64";
    class       dictionary;
    location    "system";
    object      snappyHexMeshDict;
}

// Required by v2506 (top-level)
castellatedMesh     true;
snap                true;
addLayers           false;
mergeTolerance      1e-6;

geometry
{
    pbr_fluid.stl
    {
        type triSurfaceMesh;
        name pbr;
    }

    inletBox
    {
        type searchableBox;
        min (0 0 0);
        max (@LENGTH@ @WIDTH@ @INLET_BOX_Z@);
    }
}

castellatedMeshControls
{
    maxLocalCells           @MAX_LOCAL_CELLS@;
    maxGlobalCells          @MAX_GLOBAL_CELLS@;
    minRefinementCells      @MIN_REFINEMENT_CELLS@;
    nCellsBetweenLevels     @N_CELLS_BETWEEN_LEVELS@;

    features                ();     // no explicit feature edges required

    refinementSurfaces
    {
        pbr
        {
            level (@SURFACE_LEVEL_MIN@ @SURFACE_LEVEL_MAX@);

            // Optional: create zones (handy if you want to address faces later)
            faceZone        pbrFaces;
            cellZone        pbrCells;
            cellZoneInside  inside;

            patchInfo
            {
                type wall;
            }
        }
    }

    refinementRegions
    {
        inletBox
        {
            mode inside;
            // very large distance selects the whole box
            levels ((1e15 @INLET_BOX_LEVEL@));
        }
    }

    resolveFeatureAngle     @RESOLVE_FEATURE_ANGLE@;

    // MUST be inside the STL fluid volume
    locationInMesh (@LIM_X@ @LIM_Y@ @LIM_Z@);

    allowFreeStandingZoneFaces true;
}

snapControls
{
    nSmoothPatch            3;
    tolerance               2.0;
    nSolveIter              30;
    nRelaxIter              5;

    // optional (can improve snapping on curved cylinders)
    implicitFeatureSnap     true;
    explicitFeatureSnap     false;
    multiRegionSnap         false;
}

addLayersControls
{
    relativeSizes   true;
    layers          {};
    nSurfaceLayers  0;
}

meshQualityControls
{
    maxNonOrtho             40;
    maxBoundarySkewness     10;
    maxInternalSkewness     2;
    maxConcave              80;
    minVol                  1e-15;
    minTetQuality           1e-12;
    minArea                 1e-15;
    minTwist                0.05;
    minDeterminant          0.001;
    minFaceWeight           0.05;
    minVolRatio             0.01;
    minTriangleTwist        -1;
    nSmoothScale            4;
    errorReduction          0.75;
}

// ************************************************************************* //
EOF

  # Allmesh
  cat > "$caseDir/Allmesh" <<'EOF'
#!/usr/bin/env bash
set -euo pipefail
cd "${0%/*}" || exit 1

LENGTH="@LENGTH@"
WIDTH="@WIDTH@"
HEIGHT="@HEIGHT@"
NX="@NX@"
NY="@NY@"
NZ="@NZ@"

NB="@NB@"
BAFFLE_RADIUS="@BAFFLE_RADIUS@"

PBR_SCAD="@PBR_SCAD@"

TRISURF_DIR="constant/triSurface"
TRISURF_FILE="${TRISURF_DIR}/pbr_fluid.stl"

if [ -z "${WM_PROJECT_DIR-}" ]; then
  echo "Error: OpenFOAM environment not loaded. Source your OpenFOAM bashrc first." >&2
  exit 1
fi

mkdir -p "$TRISURF_DIR"

if [ "$NB" -gt 0 ]; then
  command -v openscad >/dev/null 2>&1 || { echo "Error: openscad not found"; exit 1; }
  echo "[Allmesh] OpenSCAD -> ${TRISURF_FILE}"
  openscad -o "${TRISURF_FILE}" \
    -D MODE=1 \
    -D W="${LENGTH}" -D H="${HEIGHT}" -D D="${WIDTH}" \
    -D NB="${NB}" -D R="${BAFFLE_RADIUS}" \
    "${PBR_SCAD}"
else
  echo "[Allmesh] NB==0 -> no STL, pure blockMesh."
fi

echo "[Allmesh] blockMesh"
blockMesh

if [ "$NB" -gt 0 ]; then
  echo "[Allmesh] snappyHexMesh -overwrite"
  snappyHexMesh -overwrite
fi

echo "[Allmesh] renumberMesh -overwrite"
renumberMesh -overwrite || true

echo "[Allmesh] checkMesh"
checkMesh -allTopology -allGeometry || true

echo "[Allmesh] Done."
EOF
  chmod +x "$caseDir/Allmesh"


  # pv.foam
  cat > "$caseDir/pv.foam" <<EOF
EOF

  # constant/transportProperties
  cat > "$caseDir/constant/transportProperties" <<EOF
$HEADER

FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      transportProperties;
}

phases
(
    gas
    {
        rho             @GAS_RHO@;
        nu              @GAS_NU@;
        kappa           0;
        Cp              0;

        diameterModel   constant;
        constantCoeffs
        {
            d           @GAS_DIAMETER@;
        }
    }

    liquid
    {
        rho             @LIQUID_RHO@;
        nu              @LIQUID_NU@;
        kappa           0;
        Cp              0;

        diameterModel   constant;
        constantCoeffs
        {
            d           @LIQUID_DIAMETER@;
        }
    }

    solid
    {
        rho             @SOLID_RHO@;
        nu              @SOLID_NU@;
        kappa           0;
        Cp              0;

        diameterModel   constant;
        constantCoeffs
        {
            d           @SOLID_DIAMETER@;
        }
    }
);


sigmas
(
    // (gas liquid) 0.072;
    // (gas solid)  0;
    // (liquid solid) 0;
);

interfaceCompression
(
    // Optional interface compression per pair, leave empty to use fvSchemes/method
);

virtualMass
(
    (gas liquid) 0.5
    // (gas solid)  0.0
    // (liquid solid) 0.0
);

drag
(
    (gas liquid)
    {
        type blended;
        gas
        {
            type SchillerNaumann;
            residualPhaseFraction 0;
            residualSlip 0;
        }
        liquid
        {
            type SchillerNaumann;
            residualPhaseFraction 0;
            residualSlip 0;
        }
        residualPhaseFraction 1e-3;
        residualSlip          1e-3;
    }

    (solid liquid)
    {
        type SchillerNaumann;   // simple, robust default; swap if you prefer Gibilaro/WenYu
        residualPhaseFraction 1e-6;
        residualSlip          1e-6;
    }
);


// Dummy entries required by some models (safe to leave as is)
transportModel  Newtonian;
nu              0;

// ************************************************************************* //

EOF
}

